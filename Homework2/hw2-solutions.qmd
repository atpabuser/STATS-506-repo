---
title: "HW2 Solutions"
format: html
editor: visual
---

# Problem 1

Consider a 1-dimensional random walk with the following rules:

1.  Start at 0.
2.  At each step, move +1 or -1 with 50/50 probability. If +1 is chosen, 5% of the time move +10 instead. If -1 is chosen, 20% of the time move -3 instead. Repeat steps 2-4 $n$ times. (Note that if the +10 is chosen, it’s not +1 then +10, it is just +10.)

Write a function to determine the end position of this random walk.

The input and output should be:

Input: The number of steps Output: The final position of the walk

### Version 1: Using a loop

**Marginal computations:**

-   (+1): $0.5 \times 0.95 = 0.475$
-   (+10): $0.5 \times 0.05 = 0.025$
-   (–1): $0.5 \times 0.80 = 0.40$
-   (–3): $0.5 \times 0.20 = 0.10$

```{r}
#' Random Walk Simulation
#'
#' Simulate a 1d random walk. At each step, the walker moves +1 or -1 with
#' 50-50 odds.+1 becomes +10 with 5% chance, and -1 becomes -3 with 20% odds
#'
#' @param n The number of steps
#' @return the final position of the walk

random_walk1 <- function(n) {
  #Start at position 0
  position <- 0
  #steps vector
  steps <- c(1,10,-1,-3)
  probabilities <-c(0.475, 0.025, 0.400, 0.100)
  
  for (i in 1:n){
  #do single random draw to get move for the step 
    move <-sample(x=steps, size=1, prob=probabilities)
  
  #update position
    position <- position + move
  }
  return(position)
}
```

### Version 2: No loop, vectorized

To answer the question: The order of steps does not matter, we only need the final position since the final position, (the sum), is the sum of i.i.d steps

```{r}
#' Vectorized 1D Random Walk Simulation 
#' 
#' @param n The number of steps
#' @return Sum: Final position 
#' 

random_walk2 <- function(n) {
  #steps vector
  steps <- c(1,10,-1,-3)
  probabilities <-c(0.475, 0.025, 0.400, 0.100)
  
  #sample all at once and sum to get final position
  
  return(sum(sample(steps, size = n, replace = TRUE, prob = probabilities)))
}

```

### Version 3: Using `apply()` function

```{r}
#' using sapply() 1D Random Walk Simulation 
#' 
#' @param n The number of steps
#' @return Sum: Final position 
#' 

random_walk3 <- function(n) {
  steps <- c(1,10,-1,-3)
  probabilities <-c(0.475, 0.025, 0.400, 0.100)
  all_steps <- sapply(1:n, function(i) 
    {sample(x=steps, size=1,replace=TRUE, prob=probabilities)})
  
  return(sum(all_steps))
} 

```

### Demonstrate that all versions work by running the following:

```{r}
random_walk1(10)
random_walk2(10)
random_walk3(10)
random_walk1(1000)
random_walk2(1000)
random_walk3(1000)

```

### 1b. Demonstrate that the three versions can give the same result. Show this for both $n=10$ and $n=1000$

To control for randomness, we fix the seed before calling each random_walk function. I will do a different seed for $n=10$ and $n=1000$

### Case 1: $n=10$

```{r}
set.seed(123)
val<-10
cat("The final value for n=",val,"using random_walk1() is:",random_walk1(val))

set.seed(123)
cat("\nThe final value for n=",val,"using random_walk2() is:",random_walk2(val))

set.seed(123)
cat("\nThe final value for n=",val,"using random_walk3() is:",random_walk3(val))


```
